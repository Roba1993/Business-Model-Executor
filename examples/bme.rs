fn main() {
    // define the rule
    let logic = bme::Logic::default();

    println!(
        "{}",
        serde_json::to_string_pretty(&logic.get_json()).unwrap()
    );
    println!("");

    // parse the code from json to the objects
    let json = r#"[{"blockId":1,"blockTypeId":1,"position":{"x":165,"y":81},"nodes":[{"id":0,"nodeType":"output","connectionType":"Execution","value":null,"connectedBlockId":2,"connectedBlockTypeId":2,"connectedNodeId":0}]},{"blockId":2,"blockTypeId":2,"position":{"x":342,"y":77},"nodes":[{"id":0,"nodeType":"input","connectionType":"Execution","value":null,"connectedBlockId":1,"connectedBlockTypeId":1,"connectedNodeId":0},{"id":1,"nodeType":"output","connectionType":"Execution","value":null,"connectedBlockId":3,"connectedBlockTypeId":2,"connectedNodeId":0},{"id":2,"nodeType":"input","connectionType":"String","value":"Hello","connectedBlockId":null,"connectedBlockTypeId":null,"connectedNodeId":null}]},{"blockId":5,"blockTypeId":3,"position":{"x":345,"y":203},"nodes":[{"id":0,"nodeType":"input","connectionType":"String","value":"World","connectedBlockId":null,"connectedBlockTypeId":null,"connectedNodeId":null},{"id":1,"nodeType":"output","connectionType":"String","value":null,"connectedBlockId":3,"connectedBlockTypeId":2,"connectedNodeId":2}]},{"blockId":3,"blockTypeId":2,"position":{"x":636,"y":102},"nodes":[{"id":0,"nodeType":"input","connectionType":"Execution","value":null,"connectedBlockId":2,"connectedBlockTypeId":2,"connectedNodeId":1},{"id":1,"nodeType":"output","connectionType":"Execution","value":null,"connectedBlockId":6,"connectedBlockTypeId":2,"connectedNodeId":0},{"id":2,"nodeType":"input","connectionType":"String","value":null,"connectedBlockId":5,"connectedBlockTypeId":3,"connectedNodeId":1}]},{"blockId":6,"blockTypeId":2,"position":{"x":916,"y":111},"nodes":[{"id":0,"nodeType":"input","connectionType":"Execution","value":null,"connectedBlockId":3,"connectedBlockTypeId":2,"connectedNodeId":1},{"id":1,"nodeType":"output","connectionType":"Execution","value":null,"connectedBlockId":null,"connectedBlockTypeId":null,"connectedNodeId":null},{"id":2,"nodeType":"input","connectionType":"String","value":null,"connectedBlockId":7,"connectedBlockTypeId":3,"connectedNodeId":1}]},{"blockId":7,"blockTypeId":3,"position":{"x":660,"y":255},"nodes":[{"id":0,"nodeType":"input","connectionType":"String","value":null,"connectedBlockId":8,"connectedBlockTypeId":3,"connectedNodeId":1},{"id":1,"nodeType":"output","connectionType":"String","value":null,"connectedBlockId":6,"connectedBlockTypeId":2,"connectedNodeId":2}]},{"blockId":8,"blockTypeId":3,"position":{"x":376,"y":321},"nodes":[{"id":0,"nodeType":"input","connectionType":"String","value":"!!!","connectedBlockId":null,"connectedBlockTypeId":null,"connectedNodeId":null},{"id":1,"nodeType":"output","connectionType":"String","value":null,"connectedBlockId":7,"connectedBlockTypeId":3,"connectedNodeId":0}]}]"#;

    let mut exe = bme::Executer::new(json.to_string());
    exe.execute().unwrap();
}