fn main() {
    // define the rule
    let logic = bme::Logic::default();

    println!(
        "{}",
        serde_json::to_string_pretty(&logic.get_json()).unwrap()
    );
    println!("");

    // parse the code from json to the objects
    let json = r#"[{"blockId":1,"blockTypeId":1,"position":{"x":177,"y":102},"nodes":[{"id":0,"nodeType":"output","connectionType":"Execution","value":null,"connections":[{"type":"Execution","startBlock":1,"endBlock":2,"startNode":0,"endNode":0}]}]},{"blockId":2,"blockTypeId":2,"position":{"x":447,"y":112},"nodes":[{"id":0,"nodeType":"input","connectionType":"Execution","value":null,"connections":[{"type":"Execution","startBlock":1,"endBlock":2,"startNode":0,"endNode":0}]},{"id":1,"nodeType":"output","connectionType":"Execution","value":null,"connections":[{"type":"Execution","startBlock":2,"endBlock":3,"startNode":1,"endNode":0}]},{"id":2,"nodeType":"input","connectionType":"String","value":null,"connections":[{"type":"String","startBlock":4,"endBlock":2,"startNode":3,"endNode":2}]}]},{"blockId":4,"blockTypeId":3,"position":{"x":148,"y":255},"nodes":[{"id":2,"nodeType":"input","connectionType":"String","value":"My Number is:","connections":[]},{"id":3,"nodeType":"output","connectionType":"String","value":null,"connections":[{"type":"String","startBlock":4,"endBlock":2,"startNode":3,"endNode":2},{"type":"String","startBlock":4,"endBlock":3,"startNode":3,"endNode":2}]}]},{"blockId":5,"blockTypeId":5,"position":{"x":534,"y":358},"nodes":[{"id":2,"nodeType":"input","connectionType":"i64","value":"1","connections":[]},{"id":3,"nodeType":"output","connectionType":"i64","value":null,"connections":[{"type":"i64","startBlock":5,"endBlock":6,"startNode":3,"endNode":2}]},{"id":4,"nodeType":"input","connectionType":"i64","value":"1","connections":[]}]},{"blockId":7,"blockTypeId":2,"position":{"x":1036,"y":139},"nodes":[{"id":0,"nodeType":"input","connectionType":"Execution","value":null,"connections":[{"type":"Execution","startBlock":3,"endBlock":7,"startNode":1,"endNode":0}]},{"id":1,"nodeType":"output","connectionType":"Execution","value":null,"connections":[]},{"id":2,"nodeType":"input","connectionType":"String","value":null,"connections":[{"type":"String","startBlock":6,"endBlock":7,"startNode":3,"endNode":2}]}]},{"blockId":3,"blockTypeId":2,"position":{"x":719,"y":119},"nodes":[{"id":0,"nodeType":"input","connectionType":"Execution","value":null,"connections":[{"type":"Execution","startBlock":2,"endBlock":3,"startNode":1,"endNode":0}]},{"id":1,"nodeType":"output","connectionType":"Execution","value":null,"connections":[{"type":"Execution","startBlock":3,"endBlock":7,"startNode":1,"endNode":0}]},{"id":2,"nodeType":"input","connectionType":"String","value":null,"connections":[{"type":"String","startBlock":4,"endBlock":3,"startNode":3,"endNode":2}]}]},{"blockId":6,"blockTypeId":6,"position":{"x":761,"y":257},"nodes":[{"id":2,"nodeType":"input","connectionType":"i64","value":null,"connections":[{"type":"i64","startBlock":5,"endBlock":6,"startNode":3,"endNode":2}]},{"id":3,"nodeType":"output","connectionType":"String","value":null,"connections":[{"type":"String","startBlock":6,"endBlock":7,"startNode":3,"endNode":2}]}]}]"#;

    let mut exe = bme::Executer::new(json.to_string());
    println!("\n{:?}", exe.execute(vec![]).unwrap());
}